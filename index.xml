<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JKLY</title>
    <link>http://jkiely.co.uk/index.xml</link>
    <description>Recent content on JKLY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Thu, 02 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://jkiely.co.uk/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Things I Read In January</title>
      <link>http://jkiely.co.uk/post/Things%20I%20Read%20In%20January/</link>
      <pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/Things%20I%20Read%20In%20January/</guid>
      <description>

&lt;h1 id=&#34;books&#34;&gt;Books&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/High-Performance-Python-Performant-Programming/dp/1449361595&#34;&gt;High Performance Python&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A general overview of how to speed up python programs. Starts out with an overview of profiling which I found useful and then covers implementation details to help you make better decisions about how to use the standard python syntax and tools. I got the most value out of these chapters, not having any specific projects I need to speed up but just generally being curious, but I also found the later chapters about numpy, compiling to C and parallelizing interesting.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/gp/product/1491950358/&#34;&gt;Building Microservices&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Mostly just skimmed it, but it seemed like a pretty good overview of why and how to use microservices.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Peak-Secrets-New-Science-Expertise-x/dp/1847923194/&#34;&gt;Peak&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A book about how to achieve excellence though training by the author who conducted the experiments used by Gladwell to promote the idea of &amp;lsquo;10,000&amp;rsquo; hours. While he spends some time debunking, or at least giving context to Gladwell&amp;rsquo;s claims about his research, the book is mostly focused on the evidence for and implementation details of his claims. The book came at the right time for me as I&amp;rsquo;ve been spending a lot of time thinking about how to become a better programmer, and use my spare time more effectively.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Frankenstein-Modern-Prometheus-Wordsworth-Classics/dp/1853260231/&#34;&gt;Frankenstein&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Not much I really need to say here as the book&amp;rsquo;s reputation proceeds it, but I utterly loved it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/gp/product/B00TNBPLH4&#34;&gt;A Numerate Life&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;John Allen Paulos&amp;rsquo;s autobiography, though it spends a lot more time talking about why autobiographies are necessarily bullshit and using examples from mathematics to argue his case. I did find that it dragged a bit, despite it&amp;rsquo;s short length, but overall it enjoyed it. It introduces a lot of interesting mathematical ideas and shows you how to use them to reason about life. Also it has a brief section on the dystopian state of pickup lines in a hypothetical trans-human society. So it has that going for it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;papers&#34;&gt;Papers&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pages.cs.wisc.edu/~remzi/Naur.pdf&#34;&gt;Programming as Theory Building&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Argues that programming should be though of not as &amp;lsquo;source code production&amp;rsquo; but as building a theory by which to model the system in question. Thus a programmers job is to come up with a model of how a system works, and how to map that model on to the symbolic manipulations of a computer. And so when a new programmer is to be introduced to the code base, it&amp;rsquo;s not enough to throughly introduce them to the text of the code and give them documentation to read, they must be introduced to the core theory and shown how the text of the program maps onto it. Also, a lot of the paper is spent arguing against formal methods, and I guess it won since I&amp;rsquo;ve never heard of any of them?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.stanford.edu/class/linguist238/p36-weizenabaum.pdf&#34;&gt;Eliza&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A paper introducing the worlds first chat bot. Some of the technical details, such as how they used a their time sharing system to make it work are a little lost on me, and it was fascinating to realist I was reading an explanation that seems to come from a time before they were common knowledge. But overall it gave me a good idea of how to implement a version of the bot.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://barabasilab.neu.edu/courses/phys5116/content/watts_strogatz.pdf&#34;&gt;Collective dynamics of ‘small-world’ networks&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Introduces a network representation that sits between fully regular and fully random, these &amp;lsquo;small world&amp;rsquo; networks start out regular but them have a given number of edges randomly rewired. A few networks in nature are shown to resemble these networks, and it is explained why the small world property should hold true for them.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.princeton.edu/~jrex/teaching/spring2005/fft/moreexperiments.pdf&#34;&gt;Should Computer Scientists Experiment More?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Argues that computer scientists should conduct more experiments in order to validate ideas that are not fully understood theoretically and make sure efforts are being spent in productive directions, and debunks 16 reasons not to. The arguments certainly sound convincing but I&amp;rsquo;m hardly in a position to come down too strongly on it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.utilitarian.net/singer/by/1972----.htm&#34;&gt;Famine, Affluence, and Morality&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;An early essay by Peter Singer, that argues we in affluent societies are morally obligated to do far, far more to alleviate suffering that is the norm.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://people.csail.mit.edu/sperezde/onward13.pdf&#34;&gt;What’s Wrong with Git? A Conceptual Design Analysis&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A critique of &amp;lsquo;conceptual mismatch&amp;rsquo; in the implementation of git, arguing that the tools git provides map poorly onto the problems it&amp;rsquo;s trying to solve. It introduces &amp;lsquo;gitless&amp;rsquo; a git porcelain that introduces a new conceptual framework for git.&lt;/li&gt;
&lt;li&gt;While the paper makes no reference to the above &lt;em&gt;Programming as Theory Building&lt;/em&gt; it seems like it strongly supports its thesis. Another way to state it is that while git provides a lot of tools pertinent to the problem it is trying to solve, it provides no core theory on which to map those ideas, resulting in a confusing framework.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://philosophy.as.uky.edu/sites/default/files/The%20Absurd%20-%20Thomas%20Nagel.pdf&#34;&gt;The Absurd&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Argues against the normal justifications for life being meaningless (The Universe is big, time is long, all will die, etc), and provides it&amp;rsquo;s own justification of meaningless, that however we try to justify our lives we can always take one more step back and see there is nothing inherently supporting those justifications other than self reference. With this new notion it argues against despair or Camus&amp;rsquo; defiance, but instead that we should regard the absurdity of our lives with a sense of irony. It ends on the note that if nothing truly matters, then the fact none of this matters also doesn&amp;rsquo;t matter.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;blog-posts&#34;&gt;Blog Posts&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://worrydream.com/ClimateChange/&#34;&gt;What can a technologist do about climate change?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Fascinating article, with some fascinating visualizations. Discusses ways in which Technologists can help combat global warming.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cognitivemedium.com/tat/index.html&#34;&gt;Though as Technology&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Talks about the idea of well designed interfaces as expanding the range of thoughts we can think. As I understood it: The way kind of ideas we can have about a system depend on our mental representation of the system. The role of a good interface designer is to invent new groupings and operations for a particular system, and once a user masters this interface they also master that particular representation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/&#34;&gt;Notes on Distributed Systems for Young Bloods&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A succinct explanation of why building distributed systems is hard, and how to make it a bit easier on yourself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Books I Read In 2016</title>
      <link>http://jkiely.co.uk/post/Books%20I%20Read%20In%202016/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/Books%20I%20Read%20In%202016/</guid>
      <description>

&lt;p&gt;I though it might be nice to recap the year with a list of the books I&amp;rsquo;ve read. Before I sat down to start writing I was expecting this list to be a lot shorter, and I was plesently supprised! But I still hope to make it longer next year!&lt;/p&gt;

&lt;p&gt;So without further ado, here are all of the books I remember reading in 2016, with comments added whereever I feel like it.&lt;/p&gt;

&lt;h2 id=&#34;non-fiction&#34;&gt;Non-Fiction&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Unseen-City-Majesty-Discreet-Wilderness/dp/1623363853&#34;&gt;Unseen City: The Majesty of Pigeons, the Discreet Charm of Snails &amp;amp; Other Wonders of the Urban Wilderness&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A fun little book that takes a naturalists approach to the animals all around us. The auther is based in Berkeley, and so naturally investigates the animals he finds there, but since he&amp;rsquo;s focusing on synanthropes most of them can also be found in London (and probably most other cities).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Grokking-Algorithms-illustrated-programmers-curious/dp/1617292230&#34;&gt;Grokking Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Thinking-Statistically-Uri-Bram-ebook/dp/B005YOL2Z4&#34;&gt;Thinking Statistically&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Really short and really cheap. It gaves some clear expliantions of a few statistical concepts that attempt to make it easy to apply them to real situations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Doing-Good-Better-Effective-Difference/dp/1783350512/&#34;&gt;Doing Good Better&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/dp/B00WYGGWG4/&#34;&gt;Strangers Drowning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/dp/B004Z0TU0W/&#34;&gt;How to Read a Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Fall-Rome-End-Civilization/dp/0192807285&#34;&gt;The Fall of Rome: And the end of Civilisation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Literally the only book I managed to finish while I was in the states. It was the first economic history book I&amp;rsquo;ve read but it made me really intrested in reading further.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Sapiens-Humankind-Yuval-Noah-Harari-ebook/dp/B00K7ED54M/&#34;&gt;Sapiens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Why-West-Rules-Now-Morris-ebook/dp/B004ASNG04/&#34;&gt;Why the West Rules for Now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Zero-One-Notes-Start-Future-ebook/dp/B00KHX0II4/&#34;&gt;Zero to One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Lean-Startup-Innovation-Successful-Businesses-ebook/dp/B005PR422K/&#34;&gt;The Lean Startup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Deep-Work-Focused-Success-Distracted-ebook/dp/B013UWFM52/&#34;&gt;Deep Work: Rules for Focused Success in a Distracted World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Essays-Penguin-Modern-Classics-George-ebook/dp/B002RI98TM/&#34;&gt;Essays (George Orwell)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Regarding-Pain-Others-Susan-Sontag-ebook/dp/B00EAA6R1W/&#34;&gt;Reguarding the Pain of Others&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Between-World-Me-Ta-Nehisi-Coates-ebook/dp/B0104NWYGA&#34;&gt;Between the World and Me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/No-God-But-Origins-Evolution-ebook/dp/B0034FJG6W/&#34;&gt;No God but God&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Social-Network-Analysis-Startups-connections/dp/1449306462/&#34;&gt;Social Network Analysis for Startups: Finding connections on the social web&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Sometimes when I learn a new idea (like Automata or Memetics) it makes me impossible to talk to for months, since I insist on using it to explain absolutly everything. Soical network analysis is apparently on of those idea, and I&amp;rsquo;m really excited to get deeper into this field.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/How-Write-Thesis-MIT-Press-ebook/dp/B00UMIT5J2/&#34;&gt;How to write a Thesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Think-Complexity-Science-Computational-Modeling-ebook/dp/B007ECM460&#34;&gt;Think Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Design-Everyday-Things-revised-expanded/dp/0262525674/&#34;&gt;The Design of Everyday Things&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fiction&#34;&gt;Fiction&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Lost-Sea-Bryan-Lee-OMalley/dp/1932664165/&#34;&gt;Lost at Sea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Count-Zero-William-Gibson/dp/000648042X/&#34;&gt;Count Zero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basically all of Borges fiction.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Aleph-Penguin-Modern-Classics/dp/0141183837/&#34;&gt;The Aleph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Fictions-Jorge-Luis-Borges/dp/0141183845/&#34;&gt;Fictions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/d/Books/Universal-History-Iniquity-Penguin-Modern-Classics/0141183853&#34;&gt;A Universal History of Iniquity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/d/Books/Shakespeares-Memory-Penguin-Modern-Classics/0141183829/&#34;&gt;The Book of Sand and Shakespears Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Borges rapidly went from someone I&amp;rsquo;d never heard of to one of my favorite authers. I still have &lt;a href=&#34;https://www.amazon.co.uk/Book-Imaginary-Beings-Vintage-Classics/dp/0099442639/&#34;&gt;The Book of Imagenary Beings&lt;/a&gt; and his &lt;a href=&#34;https://www.amazon.co.uk/Total-Library-Non-Fiction-1922-1986-Classics/dp/0141183020&#34;&gt;complete non-fiction&lt;/a&gt; and I&amp;rsquo;m looking forward to them imencly.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/d/Books/Three-Body-Problem-Cixin-Liu/178497157X/&#34;&gt;The Three Body Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Road-Penguin-Modern-Classics/dp/0141182679/&#34;&gt;On the Road&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Crime-Punishment-selected-Notebooks-Wordsworth/dp/1840224304/&#34;&gt;Crime and Punishment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Things-Fall-Apart-Penguin-Classics/dp/0141023384/&#34;&gt;Things Fall Apart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/Complete-Calvin-Hobbes-Bill-Watterson/dp/1449433251/&#34;&gt;The Complete Calvin and Hobbes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Zsh Path Trouble</title>
      <link>http://jkiely.co.uk/post/Zsh%20Path%20Trouble/</link>
      <pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/Zsh%20Path%20Trouble/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been loving Zsh since switching over, but yesterday I had my first problem with it: When I tried running a python 3 program, it couldn&amp;rsquo;t find any packages. A quick &lt;code&gt;exec bash -l&lt;/code&gt; let me check that they still worked with bash, so it probably wasn&amp;rsquo;t a python thing, but a zsh thing. It grew even stranger when it turned out that it could still find all of my old python 2 packages just fine, as well as run the 2.7 version of Ipython in the command line.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t really understand the shell all that well yet, so this post really just describes how I went about trying to fix this using the little knowledge I do have, a lot of this might be wrong and/or unsafe. If you just want to see how I actually did solve it then skip to the second to last paragraph.&lt;/p&gt;

&lt;p&gt;So my first though was that this was likely to have something to do with Conda, having used that to install my python 3. My next (kinda stupid) thought was that maybe my python 3 package path (in the anaconda directory) needed to be added to my $PATH? So I checked where that was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import site
site.getsitepackages() #=&amp;gt; [&#39;/Users/jkiely/anaconda/lib/python3.5/site-packages&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Added it &amp;hellip; and of course that didn&amp;rsquo;t work. A quick check of my path on bash showed that I didn&amp;rsquo;t have the packages there ether. But it did show that I had the Conda python 3 in my path on bash but not on Zsh. Wait&amp;hellip; so how was I even getting python 3 to run on zsh them? I checked &lt;code&gt;which python3&lt;/code&gt; on zsh and it turns out that unbeknownst to me I had a second python 3 installation on my system in &lt;code&gt;/usr/local/bin&lt;/code&gt; and when I ran python 3 it was using that.&lt;/p&gt;

&lt;p&gt;So that helps me a bit. I have no idea how the anaconda version ended up in my bash path but not my zsh one, since it&amp;rsquo;s not in my bashrc, but I add it to zshrc and&amp;hellip; nothing. It&amp;rsquo;s still calling the wrong python. Hmm, so I think the shell uses the first binary of that name that it finds in the path right? What if I move it to the top of my &amp;lsquo;export to path&amp;rsquo; list? Nope, still wrong version. Ok how about I try this changing &lt;code&gt;PATH=$PATH:/path/to/anaconda&lt;/code&gt; to &lt;code&gt;PATH=/path/to/anaconda/:$PATH&lt;/code&gt; ensuring that it&amp;rsquo;s added to the front of the path regardless of when it&amp;rsquo;s exported. And&amp;hellip; it works!&lt;/p&gt;

&lt;p&gt;This solution feels a bit hacky, and I&amp;rsquo;m pretty sure that the right way to solve it, and thus the next step, is to figure out how to use virtual environments to specify exactly what version of python I want use with each project. But for now I&amp;rsquo;m glad I can at run python 3 programs at all.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Oauth2 Works</title>
      <link>http://jkiely.co.uk/post/How%20Oauth2%20Works/</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/How%20Oauth2%20Works/</guid>
      <description>

&lt;p&gt;So until recently my understanding of how OAuth2 works has been as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the keys for the thing you want to oauth into.&lt;/li&gt;
&lt;li&gt;Get the gem/package for oauthing into that particular thing.&lt;/li&gt;
&lt;li&gt;Done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, recently I wanted to use the Recurse Center API for oauthing, which didn&amp;rsquo;t have any of those convenient packages that I&amp;rsquo;m use to having do all of the work for me. I was working in Go, and so I still had the &lt;a href=&#34;https://github.com/golang/oauth2&#34;&gt;Go OAuth2 package&lt;/a&gt; to do &lt;em&gt;most&lt;/em&gt; of the work for me, but it seemed that if I was going to dig into this at all I might as well learn how it actually works. So here is what I know about how OAuth2 works so far:&lt;/p&gt;

&lt;h3 id=&#34;step-1-register-your-application&#34;&gt;Step 1: Register your application&lt;/h3&gt;

&lt;p&gt;Regardless of what packages you&amp;rsquo;re using you still need the service to actually know about you, so go to wherever you need to go to register and get a Client ID and a Client Secret code. As you can probably guess from the names, the Client ID will be public knowledge, while the Client Secret will (should) be known only to you and the site you&amp;rsquo;re authing with.&lt;/p&gt;

&lt;h3 id=&#34;step-2-redirect-you-user-to-the-service-auth-url&#34;&gt;Step 2: Redirect you user to the service Auth URL&lt;/h3&gt;

&lt;p&gt;So now you have an app, some other site knows about your app, and you have a user trying to log in via that other site, how do you get them authed? First you need to redirect them to the other sites Auth end point (maybe something like example.com/oauth/auth), you need to include two things as params with this redirect: Your Client ID, so they know who sent you, and the url you want the site to redirect you user back to after they give permission.&lt;/p&gt;

&lt;p&gt;There are also three other parameters you can choose to specify or not: Firstly you can give a state string, is is typically a short string of random character that the authing site will return unmodified. The purpose of this is to protect against &lt;a href=&#34;https://tools.ietf.org/html/rfc6749#section-10.12&#34;&gt;Cross-Site Request Forgery&lt;/a&gt;, and it can be a random value that you store per user session, a hash of the users information, or some other value tied to a given user. It ensures then when the client is redirected back to your site (step three) that the request actually originated from that user on your site, and not a third party who has tricked them into following a link (look &lt;a href=&#34;http://security.stackexchange.com/a/57886&#34;&gt;here&lt;/a&gt; for more information). Secondly you can set the scope, telling the service that you only want to access parts of this users account, for example checking their identity but not reading their email. Thirdly there is the response type. OK so this isn&amp;rsquo;t actually optional but it is pretty much always set to code, some non-standard OAuth methods allow you to set this to token and get the token immediately without any of the following steps (But with some additional preceding ones, such as making a post request with the username and password).&lt;/p&gt;

&lt;p&gt;So in the end your request will end up looking something like this: &lt;code&gt;site.com/oauth2/auth?client_id=foobar&amp;amp;redirect_uri=myapp.com/site_redirect&amp;amp;scope=public&amp;amp;state=SOMESHAHASH&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once the user reaches this site, they can choose to log in and give you permission to access their data (or not).&lt;/p&gt;

&lt;h3 id=&#34;step-3-get-the-auth-token-from-the-token-endpoint&#34;&gt;Step 3: Get the auth token from the token endpoint&lt;/h3&gt;

&lt;p&gt;Assuming the user gives you app permission to access their data, the site should then redirect them back to the url you provide, along with the authorization code and the state string you provided as parameters. As mentioned above, the first thing you should do is check the state string. If that checks out, then you need to grab the code from the params and make a request to the site&amp;rsquo;s token url. This time the request goes directly from your server to the site&amp;rsquo;s server, without the user doing anything. In the parameters of the request you should include both the code and your shared secret. If the code and the Client Secret both check out then the site should provide you with four things: Firstly the access token that you can use to do whatever the site has now authorized you to do, secondly the type of token they have granted you (usually just of type &amp;lsquo;token&amp;rsquo;), thirdly the refresh token that you can use to generate a new access token if it expires, and finally how long until it expires (which can be set to zero in the case that it never expires).&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;So if a users wants to OAuth into you app via another site, you have to send them to that site with some information on who you are and what you want to do. They then need to tell the site it&amp;rsquo;s OK for you to access their data, and the site will send them back with a code confirming that you have their permission to access their data. Your app then takes that code and goes directly to the other site, where you confirm you are who you say you are and show them the code that confirms you&amp;rsquo;re allowed to access what you say you&amp;rsquo;re allowed to access. The site then give you a token that gives you permission to do whatever that is on behalf of the user.&lt;/p&gt;

&lt;p&gt;There are still some parts I don&amp;rsquo;t understand, for example what exactly to do with the refresh token. But all in all I think I have the gist of it. As part of this learning effort I build a wrapper around the RC API in Go, to make other lives easier in the future. You can see the code for that &lt;a href=&#34;https://github.com/JKiely/RC-API&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;sources&#34;&gt;Sources:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/32534239/3878507&#34;&gt;This&lt;/a&gt; Stack Overflow answer gave me the high level context to understand what was going on.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/mziwisky/10079157&#34;&gt;This&lt;/a&gt; give a bit more detail.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://godoc.org/golang.org/x/oauth2&#34;&gt;Go OAuth2 Docs&lt;/a&gt; and reading &lt;a href=&#34;https://github.com/golang/oauth2&#34;&gt;the code itself&lt;/a&gt; helped me understand what was happening on a technical level.&lt;/li&gt;
&lt;li&gt;Where I still didn&amp;rsquo;t get it I looked at the &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;official spec&lt;/a&gt;, which is surprisingly readable!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Totes Random</title>
      <link>http://jkiely.co.uk/post/Totes%20Random/</link>
      <pubDate>Fri, 02 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/Totes%20Random/</guid>
      <description>&lt;p&gt;So it turns out that Haskell doesn&amp;rsquo;t have a random number generator in the same sense python does, one that can be called at any time and return a float between 0 and 1, instead it has a generator which needs a seed in order to produce a number. Naturally the same seed results in the same output each time, making it a little tricky to write a program which requires generating a lot of random numbers. After running into this problem while building the sudoku solver, me, &lt;a href=&#34;https://github.com/phasedchirp&#34;&gt;Sean&lt;/a&gt;, and &lt;a href=&#34;https://github.com/tayloraburgess&#34;&gt;Taylor&lt;/a&gt; got talking and we had an idea&amp;hellip;&lt;/p&gt;

&lt;p&gt;Typically RNGs are seeded with unpredictable events such as radioactive decay, or &lt;a href=&#34;https://www.random.org/&#34;&gt;atmospheric noise&lt;/a&gt;. And while we don&amp;rsquo;t have access to that, we do know of a source of noise that&amp;rsquo;s available to everyone, Twitter!&lt;/p&gt;

&lt;p&gt;So, in order to capitalize off of this bountiful resource, we set about harvesting tweets to seed our RNG. But not just any tweets would do, no, we wanted only the most statistically valid tweets, so we re-purposed some of Sean&amp;rsquo;s &lt;a href=&#34;https://github.com/phasedchirp/chirpy-learning&#34;&gt;code&lt;/a&gt; to search the Twitter streaming API for indicative key words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;random&amp;rdquo;, &amp;ldquo;stochastic&amp;rdquo;, &amp;ldquo;probability&amp;rdquo;, &amp;ldquo;randos&amp;rdquo;, &amp;ldquo;entropy&amp;rdquo;, &amp;ldquo;totes random&amp;rdquo;, &amp;ldquo;serendipity&amp;rdquo;, &amp;ldquo;coincidence&amp;rdquo;,&amp;rdquo; surprise&amp;rdquo;, &amp;ldquo;bayes&amp;rdquo;, &amp;ldquo;baes&amp;rdquo;, &amp;ldquo;laplace&amp;rdquo;, &amp;ldquo;unlikely&amp;rdquo;, &amp;ldquo;million to one&amp;rdquo;, &amp;ldquo;lottery&amp;rdquo;, &amp;ldquo;las vegas&amp;rdquo;, &amp;ldquo;monte carlo&amp;rdquo;, &amp;ldquo;monty python&amp;rdquo;, &amp;ldquo;MCMC&amp;rdquo;, &amp;ldquo;astrology&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we gathered some tweets we tried a few transformations on them to get a number out of them, such as adding up the ordinal values of the characters, but eventually we settled on hashing them all together. This hash is then fed though a &lt;a href=&#34;https://en.wikipedia.org/wiki/Mersenne_Twister&#34;&gt;Mersenne Twister&lt;/a&gt; (a pseudo-random number generator which is capable of passing something called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Diehard_tests&#34;&gt;Diehard tests&lt;/a&gt;, which includes the adorably named birthday test), and finally used to seed the native Haskell pseudo-random number generator. That&amp;rsquo;s right, our seeds go though three layers of randomization. We don&amp;rsquo;t skimp on quality here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.jkiely.co.uk/images/totes_random.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;At current we have an API that can return to you a random number between zero and one, and optionally return the tweets that were used to generate it, although so far it&amp;rsquo;s only running on my computer. I did however take the natural next step of building a &lt;a href=&#34;https://github.com/JKiely/Totes-Random-Bot&#34;&gt;twitter bot&lt;/a&gt; that takes numbers generated from twitter and posts them back to twitter, perhaps even seeding itself. This is also pending our public API before it&amp;rsquo;s up and running properly. For now the code can be viewed &lt;a href=&#34;https://github.com/JKiely/Totes-Random&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kill Your Darlings</title>
      <link>http://jkiely.co.uk/post/Kill%20Your%20Darlings/</link>
      <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/Kill%20Your%20Darlings/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“kill your darlings, kill your darlings, even when it breaks your egocentric little scribbler’s heart, kill your darlings”&lt;/p&gt;

&lt;p&gt;Stephen King&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Is there a programmer equivalent to the phrase &amp;lsquo;kill your darlings&amp;rsquo;?&lt;/p&gt;

&lt;p&gt;In writing this phrase refers to the need for an author to cut parts of a piece that they have absolutely fallen in love with if they detract from the piece overall. It&amp;rsquo;s necessary to constantly remind ourselves of this need because when we write we come to love parts of the work for reasons completely apart from their quality, and to enjoy them for reasons that will be completely lost on any subsequent reader. Parts like this need to die, because the point of our writing isn&amp;rsquo;t to amuse our selves (well, most of the time), but to communicate something to our readers.&lt;/p&gt;

&lt;p&gt;Do we need an equivalent phrase for programming? Either way, the idea certainly apples. We can sink a lot of time and effort into ideas that turn it to be detrimental to the goals of the application, no better than a simpler idea, or even the way we were doing it to begin with. Ideas that do nothing to improve our program, but that merely allow us the pride of a particularly clever solution, or the chance to use a &amp;lsquo;cool&amp;rsquo; technology. But we can&amp;rsquo;t let ego, the sunk cost fallacy, or anything else distract us from the fact that these darlings need to die.&lt;/p&gt;

&lt;p&gt;And yeah, I wrote this &lt;em&gt;mostly&lt;/em&gt; to remind myself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Occupy Olympus</title>
      <link>http://jkiely.co.uk/post/Occupy%20Olympus/</link>
      <pubDate>Mon, 18 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/Occupy%20Olympus/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a few year since I last read The Iliad, but I still think about the book a lot. It&amp;rsquo;s central conflict between living a long leisurely life for which you are hardly remembered, or living a short brutal one that may grant you &amp;ldquo;Kleos Aphthiton&amp;rdquo;&lt;sup&gt;[1]&lt;/sup&gt; really caught my interest when I first read it and never really let go.&lt;/p&gt;

&lt;p&gt;Still, another feature of the book that grabbed me was just how damn capitalist the gods are. The Christian gods in comparison talk about exulting the poor, and each giving what they can in tithe. None of that shit here however. Agamemnon has all the fatted bulls, he can burn all the bones, and so he gets all the favor. The only way you can compete with him is to out-spend him:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Zeus has changed his mind, and inclines towards Hector&#39;s sacrifices rather than ours.&amp;quot; (Book IX)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, so another investor is out-spending him in the Zeus market and is now reaping in the rewards.&lt;/p&gt;

&lt;p&gt;Of course that makes me wonder why none of the heroes exploit this. Why, when they&amp;rsquo;re splitting up the loot, is everyone worried about armor and slaves but never the fatted bulls? You take all of those &amp;lsquo;invest&amp;rsquo; them wisely in your next conflict, and bam, you&amp;rsquo;ve suddenly got even more bulls to sacrifice and you&amp;rsquo;ve even taken some gold and concubines as &amp;lsquo;dividends&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;bullshit&lt;/em&gt;. The system is rigged!&lt;/p&gt;

&lt;p&gt;The exulted get exulted-er, and the rest of us just get conquered. We need to organize. We need to redistribute the bullocks of the 1%. Occupy Olympus!&lt;/p&gt;

&lt;p&gt;[1] Well, not quite &amp;lsquo;aphthiton&amp;rsquo;, another theme of the book is how no man made thing can last.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markov Journal</title>
      <link>http://jkiely.co.uk/post/Markov%20Journal/</link>
      <pubDate>Fri, 17 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/Markov%20Journal/</guid>
      <description>&lt;p&gt;So for a while now I&amp;rsquo;ve been keeping a journal using Emacs Org Journal, mostly to chronicle various ideas and to shout at myself. I&amp;rsquo;ve had a few problems with it, but I&amp;rsquo;m mostly quite satisfied, and in contrast to my previous journal tools I love having everything easily accessible in plain text. In fact I was inspired by a friends project to take advantage of this accessibility and use it as a corpus to try and generate automatic journal-like sentences. I thought this project might teach me a little bit about myself, but I was apprehensive since whatever it would teach me was likely to be &lt;em&gt;horrifically&lt;/em&gt; depressing.&lt;/p&gt;

&lt;p&gt;So I thought I&amp;rsquo;d start out with a simple bigram Markov model. And while I know there are plenty of libraries that implement this for me I&amp;rsquo;ve never worked with these kind of things before so I wanted to implement it myself in order to learn more about them. This was my first attempt:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/JKiely/aea941ca3e6d90f14b25f1470835e7e0.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;And it got me lines like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;so many distractions, it&#39;s just need to be noble in the intensity now, I&#39;m using that one last time online, read&amp;quot;

&amp;quot;never happens. Library. Bring the basic vertion, and then bam, I&#39;m an interveiw for the world if I also need to&amp;quot;

&amp;quot;the worst thing and just get to redirect my walking will be nervous about how I wonder if it that might be nervous about your fucking&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So&amp;hellip; yeah&amp;hellip; Between my small relatively small corpus and the simplicity of the bigram model it turned out basically nonsensical. Though for all I know, I&amp;rsquo;ve actually texted someone the third one at 3am.&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t really do anything about the small size of the corpus but I could improve the model. Rather than just making it spit out trigram models I decided it would be best to make a more general ngram implementation:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/JKiely/76e2766d7506bad5ce5d83008d07eb43.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Which worked a bit better and resulted in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Umwelt is a weird millionair who has no plans to let people define custom states.&amp;quot;

&amp;quot;It is rarely the physical injury but the damange to the status of art in itself, and it would be blocked forever&amp;quot;

&amp;quot;I&#39;m there. I need to push myself harder on the scheme book, prepping for the throaty annoyed/exaperated sigh/growl I like the young&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A lot of the results seem like they could be extracts from real text, although I promise my journal was never as creepy as the third one. And yeah, I&amp;rsquo;m aware that this would have gone a lot smoother if I&amp;rsquo;d spellchecked my journal as I wrote.&lt;/p&gt;

&lt;p&gt;Unfortunately four-grams mostly resulted in it spitting out sentences from the journal verbatim, so I guess I&amp;rsquo;ve reached the limit of what I can do with my small corpus with this method. Though I would be interested in mixing the journal files up with other things I&amp;rsquo;ve written and trying out some other models on them.&lt;/p&gt;

&lt;p&gt;All the code I wrote for this can be found &lt;a href=&#34;https://github.com/JKiely/markov&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hookup Graph</title>
      <link>http://jkiely.co.uk/jekyll-posts/2016-04-18-hookup-graph/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/jekyll-posts/2016-04-18-hookup-graph/</guid>
      <description>&lt;p&gt;Do you ever look at a stranger, someone in the street or on the internet, and wonder how many hookups separate the two of you? I do.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been wondering what a graph of the world sexual encounters would look like, a graph in which every person was a node and every sexual encounter was an edge. (And let&amp;rsquo;s be as broad and inclusive as possible in our definition of sexual encounter, I won&amp;rsquo;t try to state a thorough definition here but at the very least it should include mouth and hand stuff.)&lt;/p&gt;

&lt;p&gt;My guess for the structure is that there would be a lot of disconnected nodes, a lot of two node components, a relatively low number of components slightly larger than two, and then one huge central component. That&amp;rsquo;s all speculation but I think it&amp;rsquo;s plausible.&lt;/p&gt;

&lt;p&gt;If my assumptions were correct here are some things I&amp;rsquo;d love to know about this network:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How large is the main component? What proportion of the nodes are within it?&lt;/li&gt;
&lt;li&gt;How large is the &lt;em&gt;second&lt;/em&gt; largest component? And what&amp;rsquo;s the story of the people within it? Is there an isolated community that is internally connected but has had no sexual contact with the outside world? Or has another geographically diverse component formed in parallel with the main one?&lt;/li&gt;
&lt;li&gt;How large do components typically grow before being connected to the main one?&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Hookup Graph</title>
      <link>http://jkiely.co.uk/post/Hookup%20Graph/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/Hookup%20Graph/</guid>
      <description>&lt;p&gt;Do you ever look at a stranger, someone in the street or on the internet, and wonder how many hookups separate the two of you? I do.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been wondering what a graph of the world sexual encounters would look like, a graph in which every person was a node and every sexual encounter was an edge. (And let&amp;rsquo;s be as broad and inclusive as possible in our definition of sexual encounter, I won&amp;rsquo;t try to state a thorough definition here but at the very least it should include mouth and hand stuff.)&lt;/p&gt;

&lt;p&gt;My guess for the structure is that there would be a lot of disconnected nodes, a lot of two node components, a relatively low number of components slightly larger than two, and then one huge central component. That&amp;rsquo;s all speculation but I think it&amp;rsquo;s plausible.&lt;/p&gt;

&lt;p&gt;If my assumptions were correct here are some things I&amp;rsquo;d love to know about this network:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How large is the main component? What proportion of the nodes are within it?&lt;/li&gt;
&lt;li&gt;How large is the &lt;em&gt;second&lt;/em&gt; largest component? And what&amp;rsquo;s the story of the people within it? Is there an isolated community that is internally connected but has had no sexual contact with the outside world? Or has another geographically diverse component formed in parallel with the main one?&lt;/li&gt;
&lt;li&gt;How large do components typically grow before being connected to the main one?&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>I&#39;m going to the Recurse Center</title>
      <link>http://jkiely.co.uk/jekyll-posts/2016-04-15-recurse-center/</link>
      <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/jekyll-posts/2016-04-15-recurse-center/</guid>
      <description>&lt;p&gt;Holy Fucking Shit I&amp;rsquo;m going to the Recurse Center!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the Recurse Center?&lt;/strong&gt; Well it&amp;rsquo;s kind of a writers retreat for programmers, a place you can go to work on whatever you want for three months and with support and guidance from some fantastic people and a brillient community. It&amp;rsquo;s completely free, they make their money by getting jobs for the alumni and charging the companies a recrutment fee, which is a win win for me. Oh! And they&amp;rsquo;re based in New York!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What will I work on?&lt;/strong&gt; I really want to get better at web technologies and python, but it&amp;rsquo;s really hard to narrow down my focus. I&amp;rsquo;ll probably end up doing a lot of side projects based on ideas I have and people I meet while I&amp;rsquo;m there. I really just want to get a better understanding of the tools I use, I know how to write code in python and how to build things in various web frameworks, but I don&amp;rsquo;t always understand why things work the way they do. I think RC is the perfect environment to start to fix that.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really looking forward to going to New York and being part of this community. I have no idea where I&amp;rsquo;ll go next, wherever I get a job offer I guess, but I don&amp;rsquo;t think I&amp;rsquo;ll be back in London for a while.
It&amp;rsquo;s going to be a great journey!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recurse Center</title>
      <link>http://jkiely.co.uk/post/Recurse%20Center/</link>
      <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/post/Recurse%20Center/</guid>
      <description>&lt;p&gt;Holy Fucking Shit I&amp;rsquo;m going to the Recurse Center!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the Recurse Center?&lt;/strong&gt; Well it&amp;rsquo;s kind of a writers retreat for programmers, a place you can go to work on whatever you want for three months and with support and guidance from some fantastic people and a brillient community. It&amp;rsquo;s completely free, they make their money by getting jobs for the alumni and charging the companies a recrutment fee, which is a win win for me. Oh! And they&amp;rsquo;re based in New York!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What will I work on?&lt;/strong&gt; I really want to get better at web technologies and python, but it&amp;rsquo;s really hard to narrow down my focus. I&amp;rsquo;ll probably end up doing a lot of side projects based on ideas I have and people I meet while I&amp;rsquo;m there. I really just want to get a better understanding of the tools I use, I know how to write code in python and how to build things in various web frameworks, but I don&amp;rsquo;t always understand why things work the way they do. I think RC is the perfect environment to start to fix that.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really looking forward to going to New York and being part of this community. I have no idea where I&amp;rsquo;ll go next, wherever I get a job offer I guess, but I don&amp;rsquo;t think I&amp;rsquo;ll be back in London for a while.
It&amp;rsquo;s going to be a great journey!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jkiely.co.uk/jekyll-posts/2016-06-17-markov-journal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/jekyll-posts/2016-06-17-markov-journal/</guid>
      <description>&lt;p&gt;So for a while now I&amp;rsquo;ve been keeping a journal using Emacs Org Journal, mostly to chronicle various ideas and to shout at myself. I&amp;rsquo;ve had a few problems with it, but I&amp;rsquo;m mostly quite satisfied, and in contrast to my previous journal tools I love having everything easily accessible in plain text. In fact I was inspired by a friends project to take advantage of this accessibility and use it as a corpus to try and generate automatic journal-like sentences. I thought this project might teach me a little bit about myself, but I was apprehensive since whatever it would teach me was likely to be &lt;em&gt;horrifically&lt;/em&gt; depressing.&lt;/p&gt;

&lt;p&gt;So I thought I&amp;rsquo;d start out with a simple bigram Markov model. And while I know there are plenty of libraries that implement this for me I&amp;rsquo;ve never worked with these kind of things before so I wanted to implement it myself in order to learn more about them. This was my first attempt:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/JKiely/aea941ca3e6d90f14b25f1470835e7e0.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;And it got me lines like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;so many distractions, it&#39;s just need to be noble in the intensity now, I&#39;m using that one last time online, read&amp;quot;

&amp;quot;never happens. Library. Bring the basic vertion, and then bam, I&#39;m an interveiw for the world if I also need to&amp;quot;

&amp;quot;the worst thing and just get to redirect my walking will be nervous about how I wonder if it that might be nervous about your fucking&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So&amp;hellip; yeah&amp;hellip; Between my small relatively small corpus and the simplicity of the bigram model it turned out basically nonsensical. Though for all I know, I&amp;rsquo;ve actually texted someone the third one at 3am.&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t really do anything about the small size of the corpus but I could improve the model. Rather than just making it spit out trigram models I decided it would be best to make a more general ngram implementation:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/JKiely/76e2766d7506bad5ce5d83008d07eb43.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Which worked a bit better and resulted in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Umwelt is a weird millionair who has no plans to let people define custom states.&amp;quot;

&amp;quot;It is rarely the physical injury but the damange to the status of art in itself, and it would be blocked forever&amp;quot;

&amp;quot;I&#39;m there. I need to push myself harder on the scheme book, prepping for the throaty annoyed/exaperated sigh/growl I like the young&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A lot of the results seem like they could be extracts from real text, although I promise my journal was never as creepy as the third one. And yeah, I&amp;rsquo;m aware that this would have gone a lot smoother if I&amp;rsquo;d spellchecked my journal as I wrote.&lt;/p&gt;

&lt;p&gt;Unfortunately four-grams mostly resulted in it spitting out sentences from the journal verbatim, so I guess I&amp;rsquo;ve reached the limit of what I can do with my small corpus with this method. Though I would be interested in mixing the journal files up with other things I&amp;rsquo;ve written and trying out some other models on them.&lt;/p&gt;

&lt;p&gt;All the code I wrote for this can be found &lt;a href=&#34;https://github.com/JKiely/markov&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jkiely.co.uk/jekyll-posts/2016-07-18-occupy-olympus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/jekyll-posts/2016-07-18-occupy-olympus/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a few year since I last read The Iliad, but I still think about the book a lot. It&amp;rsquo;s central conflict between living a long leisurely life for which you are hardly remembered, or living a short brutal one that may grant you &amp;ldquo;Kleos Aphthiton&amp;rdquo;&lt;sup&gt;[1]&lt;/sup&gt; really caught my interest when I first read it and never really let go.&lt;/p&gt;

&lt;p&gt;Still, another feature of the book that grabbed me was just how damn capitalist the gods are. The Christian gods in comparison talk about exulting the poor, and each giving what they can in tithe. None of that shit here however. Agamemnon has all the fatted bulls, he can burn all the bones, and so he gets all the favor. The only way you can compete with him is to out-spend him:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Zeus has changed his mind, and inclines towards Hector&#39;s sacrifices rather than ours.&amp;quot; (Book IX)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yeah, so another investor is out-spending him in the Zeus market and is now reaping in the rewards.&lt;/p&gt;

&lt;p&gt;Of course that makes me wonder why none of the heroes exploit this. Why, when they&amp;rsquo;re splitting up the loot, is everyone worried about armor and slaves but never the fatted bulls? You take all of those &amp;lsquo;invest&amp;rsquo; them wisely in your next conflict, and bam, you&amp;rsquo;ve suddenly got even more bulls to sacrifice and you&amp;rsquo;ve even taken some gold and concubines as &amp;lsquo;dividends&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;bullshit&lt;/em&gt;. The system is rigged!&lt;/p&gt;

&lt;p&gt;The exulted get exulted-er, and the rest of us just get conquered. We need to organize. We need to redistribute the bullocks of the 1%. Occupy Olympus!&lt;/p&gt;

&lt;p&gt;[1] Well, not quite &amp;lsquo;aphthiton&amp;rsquo;, another theme of the book is how no man made thing can last.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://jkiely.co.uk/jekyll-posts/2016-08-17-kill-your-darlings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://jkiely.co.uk/jekyll-posts/2016-08-17-kill-your-darlings/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“kill your darlings, kill your darlings, even when it breaks your egocentric little scribbler’s heart, kill your darlings”&lt;/p&gt;

&lt;p&gt;Stephen King&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Is there a programmer equivalent to the phrase &amp;lsquo;kill your darlings&amp;rsquo;?&lt;/p&gt;

&lt;p&gt;In writing this phrase refers to the need for an author to cut parts of a piece that they have absolutely fallen in love with if they detract from the piece overall. It&amp;rsquo;s necessary to constantly remind ourselves of this need because when we write we come to love parts of the work for reasons completely apart from their quality, and to enjoy them for reasons that will be completely lost on any subsequent reader. Parts like this need to die, because the point of our writing isn&amp;rsquo;t to amuse our selves (well, most of the time), but to communicate something to our readers.&lt;/p&gt;

&lt;p&gt;Do we need an equivalent phrase for programming? Either way, the idea certainly apples. We can sink a lot of time and effort into ideas that turn it to be detrimental to the goals of the application, no better than a simpler idea, or even the way we were doing it to begin with. Ideas that do nothing to improve our program, but that merely allow us the pride of a particularly clever solution, or the chance to use a &amp;lsquo;cool&amp;rsquo; technology. But we can&amp;rsquo;t let ego, the sunk cost fallacy, or anything else distract us from the fact that these darlings need to die.&lt;/p&gt;

&lt;p&gt;And yeah, I wrote this &lt;em&gt;mostly&lt;/em&gt; to remind myself.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>